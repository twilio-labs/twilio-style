#!/bin/bash

## Publish Script
## Cleans up the node_modules, re-installs everything, runs test before publishing
## By default, it will attempt to publish as next-gen, unless 'public' is provided
## i.e.
##    ./bin/publish public patch        publishes as main version patch
##    ./bin/publish alpha  minor        publishes as next-gen alpha minor bump

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
LERNA="$DIR/../node_modules/.bin/lerna"

# Release tag
tag="alpha"
if [ "$1" == "public" ] ; then
  tag="public"
fi
if [ "$1" == "beta" ] ; then
  tag="beta"
fi
# Version bump
bump="patch"
if [ "$1" == "minor" ] ; then
  bump="minor"
fi
if [ "$1" == "major" ] ; then
  bump="major"
fi

# Runs script but quits if script exists with non-zero exit code
function run_script() {
  eval "$@"
  if [ $? -eq 1 ] ; then
    echo "Script '$@' failed - exiting"
    exit $?
  fi
}

# Show notification and a countdown before publihsing
secs=5
while [ $secs -gt 0 ]; do
  echo -ne "Publishing as a \033[1m${tag}\033[0m with a \033[1m${bump}\033[0m bump in ${secs}sec\033[0K\r"
  sleep 1
  : $((secs--))
done
echo -ne "Publishing as a \033[1m${tag}\033[0m with a \033[1m${bump}\033[0m bump\033[0K\r"
echo -ne "\r\n"

# Cleanup
run_script $LERNA clean -y
run_script $LERNA run clean
run_script rm -rf node_modules

# Install
run_script npm install

# Test
run_script npm run test

# Publish
echo -e "\n------------------------------------"
echo "-- Publishing as a ${tag} release --"
echo -e "------------------------------------\n"
if [ "$1" == "public" ] ; then
  run_script $LERNA publish "${bump}"
else
  run_script $LERNA publish "${bump}" --dist-tag "${tag}"
fi
